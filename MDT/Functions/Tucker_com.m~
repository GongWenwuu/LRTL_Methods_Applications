function [X, G, U] = Tucker_com(T,Q,G,U,Rho,maxiter,maxiter2,tol,verb)

  rho = Rho(1);

  N  = length(U);
  for n = 1:N
    II(n) = size(U{n},1);
    R(n) = size(U{n},2);
  end

  T = Q.*T;
  GU= tensor_allprod(G,U,0,R);
  X = GU;
  Z = zeros(size(X));
  obj = (1/sum(Q(:)))*norm(T(Q(:)==1) - X(Q(:)==1))^2;

  for iter = 1:maxiter

    for iter2 = 1:maxiter2    
    for n = 1:N
      Y{n} = unfold(tensor_allprod_exc(X+Z/rho,U,1,n,II),n);
      [U{n},~,~] = svds(Y{n}*Y{n}',R(n));
    end
    end
    G = tensor_allprod(X + Z/rho,U,1,II);
    GU= tensor_allprod(G,U,0,R);

    X = (T + rho*GU - Z) ./ (Q+rho);

    Z = Z + rho*(X - GU);

    obj2 = (1/sum(Q(:)))*norm(T(Q(:)==1) - X(Q(:)==1))^2;
    c    = norm(X(:) - GU(:))^2;
    
    if mod(iter,verb) == 0
      fprintf('iter %d:: %e :: %e :: %e :: %e\n',iter,obj2,abs(obj2-obj),c,rho);%fflush(1);
    end
    if iter > 10 & abs(obj2 - obj) < tol & c < tol
      break;
    else
      obj = obj2;
    end
    %rho = min(Rho(3),Rho(2)*rho);
    rho = max(Rho(2),min(Rho(3),c));

  end


